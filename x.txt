import mongoose from "mongoose";

const connectDB = async () => {
  try {
    const conn = await mongoose.connect(process.env.MONGO_URI);
    console.log(`MongoDB Connected: ${conn.connection.host}`);
  } catch (error) {
    console.error(`Error: ${error.message}`);
    process.exit(1);
  }
};

export default connectDB;
import User from "../models/User.js";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";

const register = async (req, res, next) => {
  try {
    const { name, email, password, role, mobile, village } = req.body;

    // Hash the password
    const hashedPassword = await bcrypt.hash(password, 10);

    const user = await User.create({
      name: name,
      email: email,
      password: hashedPassword,
      role: role,
      mobile: mobile,
      village: village,
    });

    res.json({
      id: user._id,
      name: user.name,
      email: user.email,
      password: user.password,
      role: user.role,
      mobile: user.mobile,
      village: user.village,
    });
  } catch (err) {
    console.log("error on register endpoint ", err);
    next(err);
  }
};

const login = async (req, res, next) => {
  try {
    const { email, password } = req.body;

    const user = await User.findOne({ email });
    if (!user) {
      res.status(404);
      throw new Error("User not found");
    }

    // Validate password
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      res.status(401);
      throw new Error("Invalid credentials");
    }

    // Generate token
    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });

    res.json({
      token,
      id: user._id,
      name: user.name,
      email: user.email,
    });
  } catch (err) {
    console.log("error on login endpoint ", err);
    next(err);
  }
};

export { register, login };
import Farm from "../models/Farm.js"

const addCrop = async (req, res) => {
  try {
    const { crop, quantity, price, village, mobile } = req.body;
    console.log(req.user)
    const newCrop = await Farm.create({
      crop:crop,
      quantity:quantity,
      price:price,
      village:village,
      mobile: mobile,
      farmer: req.user.userId
    });
    res.json({
        id: newCrop._id,
        crop: newCrop.crop,
        quantity: newCrop.quantity,
        price: newCrop.price,
        village:newCrop.village,
        mobile: newCrop.mobile,
      });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
};
const getCropsByFarmer = async (req, res) => {
  try {
    const crops = await Farm.find({ farmer: req.user.userId }).exec(); 

    res.json(crops);
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
};
const getCrops = async (req, res) => {
  try {
    const crops = await Farm.find().exec(); 
    res.json(crops);
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
};
export { addCrop, getCropsByFarmer,getCrops };

import jwt from 'jsonwebtoken';

const authenticateUser = (req, res, next) => {
  try {
    const token = req.headers.authorization.split(' ')[1];
    //console.log(token)
    const decoded = jwt.verify(token, process.env.JWT_SECRET); // Replace 'your-secret-key' with your own secret key used for JWT signing
    //console.log(process.env.JWT_SECRET)
     console.log(decoded)
    req.user = decoded;
   // console.log(req.user)
    next();
  } catch (error) {
    res.status(401).json({ success: false, message: 'Authentication failed' });
  }
};

export default authenticateUser;
import mongoose from "mongoose";
const farmSchema = mongoose.Schema(
  {
    crop: {
      type: String,
      required: true,
    },
    quantity: {
      type: String,
      required: true,
    },
    price: {
      type: String,
      required: true,
    },
    village: {
      type: String,
      required: true,
    },
    mobile: {
      type: Number,
      required: true,
    },
    farmer: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "user",
      required: true,
    },
  },
  { timestamps: true }
);
const farm = mongoose.model("farm", farmSchema);
export default farm;
import mongoose from "mongoose";
const userSchema = mongoose.Schema(
    {
        name: {
        type: String,
         required: true
        },
        email: {
        type: String,
            required: true,
         unique:true
        },
        password: {
            type: String,
            required: true,
        },
        role: {
            type: String,
          required:true  
        },
        mobile: {
            type: Number,
         required: true
        },
        village: {
            type: String,
         required: true
        }
},{timestamps:true}
)
const user=mongoose.model("user",userSchema)
export default user
import express from "express"
import { register, login } from "../controllers/Auth.js"
import { addCrop,getCropsByFarmer,getCrops } from "../controllers/Crops.js"
import authenticateUser from "../middleware/authenticate.js"
const router = express.Router()
router.post("/addcrop",authenticateUser, addCrop)
router.get("/getcropsbyFarmer", authenticateUser, getCropsByFarmer)
router.get("/getCrops",authenticateUser,getCrops)
router.post("/register",register)
router.post("/login", login)
export default router
NODE_ENV="developmet"
PORT=5000
MONGO_URI=mongodb+srv://bhoomika:munni@cluster0.sowf5vi.mongodb.net/
JWT_SECRET=green-market
import express from "express"
import dotenv from "dotenv"
import userRoute from "./routes/routes.js"
import connectDB from "./config/db.js"
dotenv.config()
connectDB()
const port = process.env.PORT;
const app = express()
app.use(express.json())
app.use(express.urlencoded({ extended: true }));
app.use('/greenmarket',userRoute)
app.listen(port,()=>console.log(`server started at ${port}`))
